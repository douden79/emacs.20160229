diff --cc core/editor.el
index 74262fb,850aea7..0000000
--- a/core/editor.el
+++ b/core/editor.el
@@@ -35,38 -31,14 +35,42 @@@
  ;;(semantic-add-system-include "/usr/local/boost_1_54_0/" 'c++-mode)
  (semantic-add-system-include "/home/babel/Build/DRV/BcmLinuxDVB/DRV/brcmlinuxdvbvix/" 'c-mode)
  
 -;;++++>> tabbar ruler
 -(setq tabbar-ruler-global-tabbar t)    ; get tabbar
 -(setq tabbar-ruler-global-ruler t)     ; get global ruler
 -;;(setq tabbar-ruler-popup-menu t)       ; get popup menu.
 -;;(setq tabbar-ruler-popup-toolbar t)    ; get popup toolbar
 -;;(setq tabbar-ruler-popup-scrollbar t)  ; show scroll-bar on mouse-move
 +;;--------------------------------- Edit
 +(add-hook 'after-init-hook 'global-company-mode)
 +
 +;;--------------------------------- Layout for ecb-layout
 +(setq ecb-tip-of-the-day nil)
 +;;(ecb-layout-define "babel-custom-layout" left
 +;;  "This function creates the following layout by babel:"
 +;;  (ecb-set-speedbar-buffer)
 +;;  (ecb-split-ver 0.35)
 +;;  (ecb-set-methods-buffer)
 +;;  (ecb-split-ver 0.30)
 +;;  (ecb-set-symboldef-buffer)
 +;;  (select-window (next-window)))
 +
 +;;--------------------------------- Dired
 +;; latest file list
 +(setq dired-listing-switches "-alhF")
 +
 +;;--------------------------------- Helm Gtags setting
 +(require 'helm-config)
 +(require 'helm-gtags)
 +
 +;; Enable helm-gtags-mode
 +(add-hook 'c-mode-hook 'helm-gtags-mode)
 +(add-hook 'c++-mode-hook 'helm-gtags-mode)
 +(add-hook 'asm-mode-hook 'helm-gtags-mode)
 +(add-hook 'php-mode-hook 'helm-gtags-mode)
 +(add-hook 'python-mode-hook 'helm-gtags-mode)
 +
 +;; customize
 +(custom-set-variables
 + '(helm-gtags-path-style 'relative)
 + '(helm-gtags-ignore-case t)
 + '(helm-gtags-auto-update t))
++
+ (require 'tabbar-ruler)
+ 
+ ;++++>> Edit
  (provide 'editor)
diff --cc core/gui.el
index 03d6015,bc1dc9e..0000000
--- a/core/gui.el
+++ b/core/gui.el
@@@ -34,111 -33,9 +34,114 @@@
  
  (advice-add #'linum-update-window :after #'linum-update-window-scale-fix)
  
 +;;+++++++++> tabbar ruler
 +;; buffer groups function
 +(require 'tabbar)
 +(tabbar-mode 1)
 +
 +(setq tabbar-buffer-groups-function nil)
 +
 +;; dolist button
 +(dolist (btn '(tabbar-buffer-home-button
 +               tabbar-scroll-left-button
 +               tabbar-scroll-right-button))
 +               (set btn (cons (cons "" nil)
 +                             (cons "" nil))))
 +
 +;; separator
 +(setq tabbar-separator '(2.2))
 +
 +;; tabbar attribute color and ui
 +(set-face-attribute
 + 'tabbar-default nil
 + :family "Monaco"
 + :background "#34495E"
 + :foreground "#EEEEEE"
 + :height 0.95
 + )
 +(set-face-attribute
 + 'tabbar-unselected nil
 + :background "#34495E"
 + :foreground "#EEEEEE"
 + :box nil
 +)
 +(set-face-attribute
 + 'tabbar-modified nil
 + :background "#E67E22"
 + :foreground "#EEEEEE"
 + :box nil
 +)
 +(set-face-attribute
 + 'tabbar-selected nil
 + :background "#E74C3C"
 + :foreground "#EEEEEE"
 + :box nil)
 +(set-face-attribute
 + 'tabbar-button nil
 + :box nil)
 +(set-face-attribute
 + 'tabbar-separator nil
 + :height 2.0)
 +
 +;; tabbar display buffers-menu-buffer-name-length
 +(defvar tabbar-displayed-buffers
 +  '("*scratch*" "*Messages*" "*Backtrace*" "*Colors*" "*Faces*" "*vc-")
 +  "*Regexps matches buffer names always included tabs.")
 +
 +;; tabbar displayed buffers
 +(defvar tabbar-displayed-buffers
 +  '("*scratch*" "*Messages*" "*Backtrace*" "*Colors*" "*Faces*" "*vc-")
 +  "*Regexps matches buffer names always included tabs.")
 +
 +(defun tabbar-buffer-list ()
 +  "Return the list of buffers to show in tabs.
 +Exclude buffers whose name starts with a space or an asterisk.
 +The current buffer and buffers matches `tabbar-displayed-buffers'
 +are always included."
 +  (let* ((hides (list ?\  ?\*))
 +         (re (regexp-opt tabbar-displayed-buffers))
 +         (cur-buf (current-buffer))
 +         (tabs (delq nil
 +                     (mapcar (lambda (buf)
 +                               (let ((name (buffer-name buf)))
 +                                 (when (or (string-match re name)
 +                                           (not (memq (aref name 0) hides)))
 +                                   buf)))
 +                             (buffer-list)))))
 +    ;; Always include the current buffer.
 +    (if (memq cur-buf tabs)
 +        tabs
 +      (cons cur-buf tabs))))
 +
 +(setq tabbar-buffer-list-function 'tabbar-buffer-list)
 +
 +;; Ctrl-Tab, Ctrl-Shift-Tab 
 +(dolist (func '(tabbar-mode tabbar-forward-tab tabbar-forward-group tabbar-backward-tab tabbar-backward-group))
 +  (autoload func "tabbar" "Tabs at the top of buffers and easy control-tab navigation"))
 +(defmacro defun-prefix-alt (name on-no-prefix on-prefix &optional do-always)
 +  `(defun ,name (arg)
 +     (interactive "P")
 +     ,do-always
 +     (if (equal nil arg)
 +         ,on-no-prefix
 +       ,on-prefix)))
 +
 +;;------------------- highlight-symbol
 +(require 'highlight-symbol)
 +(setq highlight-symbol-colors '("DarkOrange" "DodgerBlue1" "DeepPink1")) ;; 使いたい色を設定、repeatしてくれる。
 +
 +;;------------------- flymake
 +(require 'flymake)
 +;; flymake error
 +(set-face-background 'flymake-errline "#E74C3C")
 +(set-face-foreground 'flymake-errline "white")
 +
 +(defadvice flymake-post-syntax-check (before flymake-force-check-was-interrupted)
 +  (setq flymake-check-was-interrupted t))
 +(ad-activate 'flymake-post-syntax-check)
+ ;;+++++> hlinum
+ (require 'hlinum)
+ (hlinum-activate)
  
  (provide 'gui)
  ;; ui.el ends here!!!!
diff --cc core/keybindings.el
index 5791999,2d822e6..0000000
--- a/core/keybindings.el
+++ b/core/keybindings.el
diff --cc core/packages.el
index a7e04ea,eaeecbb..0000000
--- a/core/packages.el
+++ b/core/packages.el
@@@ -17,36 -17,34 +17,43 @@@
  ;;----------------------~---------------------~-----------------------
  (defvar babel-packages
    '(
 -    ;;=============> GUI.
 +    ;;-------------- GUI.
 +    material-theme
      leuven-theme
++
 +    highlight-symbol
 +    ;;-------------- Enhanced.
+     hlinum
+     linum
+     ;;=============> Enhanced.
      smex
 -    ;;=============> Edit.
 +    ;;-------------- Edit.
      smartparens
 -    ;;=============> IDE
 +    ;;-------------- IDE
      ecb
      auto-complete
      yasnippet
 -    highlight-symbol
      function-args
 +    company
 +    helm
 +    ;;-------------- Default.
+     tabbar-ruler
+     ;;=============> Default.
      better-defaults
      iedit
      linum
 +    hlinum
      magit
      multiple-cursors
 -    ;;=============> C/C++
 -    flymake-google-cpplint
 +    tabbar-ruler
 +    ;;-------------- C/C++
      flymake-cursor
 -    google-c-style
 -    ;;=============> python
 -    auto-virtualenv
 +    ;;-------------- Syntax
 +    flymake
 +    ;;-------------- Tagging
 +    helm-gtags
 +    helm-cscope
+     ;;=============> syntax
      )
    "A list of packages to ensure are installed at launch.")
  
diff --git a/core/python-mode.el b/core/python-mode.el
index a7edd96..b676518 100644
--- a/core/python-mode.el
+++ b/core/python-mode.el
@@ -1,11 +1,5 @@
 ;;+-------------------------~-----------------------~--------------------------------+
 ;;|                           Emacs's Python Env                                     |
 ;;+-------------------------~-----------------------~--------------------------------+
-(require 'auto-virtualenv)
-(add-hook 'python-mode-hook 'auto-virtualenv-set-virtualenv)
-;; Activate on changing buffers
-;;(add-hook 'window-configuration-change-hook 'auto-virtualenv-set-virtualenv) <<----- error code
-;; Activate on focus in
-(add-hook 'focus-in-hook 'auto-virtualenv-set-virtualenv)
-;;
+
 (provide 'python-mode)
